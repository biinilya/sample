swagger: "2.0"
info:
  title: Toptal demo app (Run Keeper)
  description: This RunKeeper API allows you to manage users run data
  version: 1.0.0
  contact:
    email: me@ilyabiin.com
basePath: /api/v1
paths:
  /user/:
    get:
      tags:
      - user
      description: Users Directory
      operationId: UserController.Get All
      parameters:
      - in: header
        name: X-Access-Token
        description: Access Token
        required: true
        type: string
      - in: query
        name: filter
        description: Filter users e.x. (key eq 'xxx')
        type: string
      - in: query
        name: offset
        description: Offset in records
        type: integer
        format: int64
      - in: query
        name: limit
        description: Limit number of records to (default 50)
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.UserInfoView'
        "401":
          description: unauthorized
        "403":
          description: forbidden
    post:
      tags:
      - user
      description: create new User, returns key and secret used to authorize
      operationId: UserController.Post
      responses:
        "201":
          description: ""
          schema:
            $ref: '#/definitions/models.UserCredentialsView'
  /user/{uid}:
    get:
      tags:
      - user
      description: get User
      operationId: UserController.Get One
      parameters:
      - in: header
        name: X-Access-Token
        description: Access Token
        required: true
        type: string
      - in: path
        name: uid
        description: User ID
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.UserInfoView'
        "401":
          description: unauthorized
        "403":
          description: forbidden
    delete:
      tags:
      - user
      description: delete the User
      operationId: UserController.Delete
      parameters:
      - in: header
        name: X-Access-Token
        description: Access Token
        required: true
        type: string
      - in: path
        name: uid
        description: User ID
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.UserInfoView'
        "400":
          description: bad request (uid is missing or is not a number)
        "401":
          description: unauthorized
        "403":
          description: forbidden
  /user/{uid}/credentials:
    put:
      tags:
      - user
      description: generate new User credentials
      operationId: UserController.Put
      parameters:
      - in: header
        name: X-Access-Token
        description: Access Token
        required: true
        type: string
      - in: path
        name: uid
        description: User ID
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.UserCredentialsView'
        "400":
          description: bad request (uid is missing or is not a number)
        "401":
          description: unauthorized
        "403":
          description: forbidden
  /user/{uid}/record/:
    get:
      tags:
      - user/:uid/record
      description: Get all user-related records
      operationId: RecordController.GetAll
      parameters:
      - in: header
        name: X-Access-Token
        description: Access Token
        required: true
        type: string
      - in: path
        name: uid
        description: User ID
        required: true
        type: integer
        format: int64
      - in: query
        name: filter
        description: Filter records e.x. (date eq '2017-01-01')
        type: string
      - in: query
        name: offset
        description: Offset in records
        type: integer
        format: int64
      - in: query
        name: limit
        description: Limit number of records to (default 50)
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.RecordView'
        "400":
          description: Bad request
        "401":
          description: unauthorized
        "403":
          description: forbidden
    post:
      tags:
      - user/:uid/record
      description: create new Record, returns new record data
      operationId: RecordController.Post
      parameters:
      - in: header
        name: X-Access-Token
        description: Access Token
        required: true
        type: string
      - in: path
        name: uid
        description: User ID
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: Record
        required: true
        schema:
          $ref: '#/definitions/models.RecordData'
      responses:
        "201":
          description: ""
          schema:
            $ref: '#/definitions/models.RecordView'
        "400":
          description: Bad request
        "401":
          description: unauthorized
        "403":
          description: forbidden
        "503":
          description: weather service is down
  /user/{uid}/record/{record_id}:
    put:
      tags:
      - user/:uid/record
      description: update existing record, returns updated record data
      operationId: RecordController.Put
      parameters:
      - in: header
        name: X-Access-Token
        description: Access Token
        required: true
        type: string
      - in: path
        name: uid
        description: User ID
        required: true
        type: integer
        format: int64
      - in: path
        name: record_id
        description: Record ID
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: Record
        required: true
        schema:
          $ref: '#/definitions/models.RecordData'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.RecordView'
        "400":
          description: Bad request
        "401":
          description: unauthorized
        "403":
          description: forbidden
    delete:
      tags:
      - user/:uid/record
      description: update existing record, returns updated record data
      operationId: RecordController.Delete
      parameters:
      - in: header
        name: X-Access-Token
        description: Access Token
        required: true
        type: string
      - in: path
        name: uid
        description: User ID
        required: true
        type: integer
        format: int64
      - in: path
        name: record_id
        description: Record ID
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.RecordView'
        "400":
          description: Bad request
        "401":
          description: unauthorized
        "403":
          description: forbidden
  /user/{uid}/record/report/weekly:
    get:
      tags:
      - user/:uid/record
      description: Get average distance and duration per week
      operationId: RecordController.WeeklyReport
      parameters:
      - in: header
        name: X-Access-Token
        description: Access Token
        required: true
        type: string
      - in: path
        name: uid
        description: User ID
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.WeeklyReport'
        "400":
          description: Bad request
        "401":
          description: unauthorized
        "403":
          description: forbidden
  /user/sign_in:
    post:
      tags:
      - user
      description: Use this method to receive Access Token which is required for API
        access
      operationId: UserController.SignIn
      parameters:
      - in: body
        name: body
        description: Credentials to Sign In
        required: true
        schema:
          $ref: '#/definitions/models.UserCredentialsView'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.UserAccessTokenView'
        "400":
          description: bad request
        "403":
          description: forbidden
definitions:
  models.RecordData:
    title: RecordData
    type: object
    properties:
      date:
        type: string
        format: string
      distance:
        type: number
        format: double
      duration:
        type: number
        format: double
      latitude:
        type: number
        format: double
      longitude:
        type: number
        format: double
  models.RecordView:
    title: RecordView
    type: object
    properties:
      date:
        type: string
        format: string
      distance:
        type: number
        format: double
      duration:
        type: number
        format: double
      id:
        type: integer
        format: int64
      latitude:
        type: number
        format: double
      longitude:
        type: number
        format: double
      weather:
        $ref: '#/definitions/models.WeatherInfo'
  models.UserAccessTokenView:
    title: UserAccessTokenView
    type: object
    properties:
      access-token:
        type: string
  models.UserCredentialsView:
    title: UserCredentialsView
    type: object
    properties:
      id:
        type: integer
        format: int64
      key:
        type: string
      secret:
        type: string
  models.UserInfoView:
    title: UserInfoView
    type: object
    properties:
      created:
        type: string
        format: string
      id:
        type: integer
        format: int64
      key:
        type: string
      updated:
        type: string
        format: string
  models.WeatherInfo:
    title: WeatherInfo
    type: object
  models.WeeklyReport:
    title: WeeklyReport
    type: object
    properties:
      avg_distance:
        type: number
        format: double
      avg_duration:
        type: number
        format: double
      week:
        type: integer
        format: int64
      year:
        type: integer
        format: int64
tags:
- name: user
  description: |2
     UserController operations for User
- name: user/:uid/record
  description: |2
     RecordController operations for Record
