# Copyright 2010 The Go Authors. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

package main

type FilterPeg Peg {
  AST
}

e <- sp e1 !.
e1 <- e2 ( and e2 { p.AddOperator(OpAnd) } / or e2 { p.AddOperator(OpOr) } )*
e2 <- not value { p.AddOperator(OpNot) } / value
value <- expression sp / open e1 close

and <- 'AND' sp
or <- 'OR' sp
not <- 'NOT' sp

open <- '(' sp
close <- ')' sp

gt <- '>' { p.AddComparator(CmpGt) }
gte <- '>=' { p.AddComparator(CmpGte) }
lt <- '<' { p.AddComparator(CmpLt) }
lte <- '<=' { p.AddComparator(CmpLte) }
eq <- '=' { p.AddComparator(CmpEq) }

quote <- '\''

expression <- (identifier sp comparator sp parameter) { p.AddExpression() }
comparator <- gt / gte / lt / lte / eq
identifier <- <[a-zA-Z][a-zA-Z0-9_]*> { p.AddIdentifier(buffer[begin:end]) }
p_string <- quote <[^']+> quote { p.AddArgument(TypeString, buffer[begin:end]) }
p_number <- <[0-9]+> { p.AddArgument(TypeInt, buffer[begin:end]) }
parameter <- p_string / p_number
sp <- ( ' ' / '\t' )*
